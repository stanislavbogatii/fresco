// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model User {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  email         String   @unique
  hash          String

  profile       Profile?
  company       Company?

  @@map("users")
}

enum GenderEnum {
  female
  male
}

model Company {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  commercialName  String
  phone           String?
  fiscalCode      String?

  userId    Int      @unique

  user      User     @relation(fields: [userId], references: [id])
  products  Product[] 

  @@map("companies")
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?
  phone     String?
  gender    GenderEnum?

  userId    Int       @unique

  user      User      @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Lang {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  langId           String           @unique
  productContents  ProductContent[]
  categoryContents CategoryContent[]

  @@map("lang")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive Boolean
  code     String  @unique

  parentId Int?

  parent          Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]        @relation("CategoryHierarchy")
  contents        CategoryContent[]
  products        Product[]     

  attributes      CategoryAttribute[]

  // categoryProducts         CategoryProduct[]

  @@map("categories")
}

model CategoryContent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String?
  description String?
  slug        String? @unique

  categoryId Int
  langId     String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  lang     Lang     @relation(fields: [langId], references: [langId])

  @@unique([langId, categoryId])
  @@map("category_content")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive Boolean   @default(true)
  price    Float
  oldPrice Float?
  article  String
  codeRef  String
  brand    String?


  origin_country  String?
  vat_rate        Float?

  companyId Int 
  categoryId Int?
  
  company Company   @relation(fields: [companyId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // categoryProducts  CategoryProduct[]
  contents          ProductContent[]
  attributes        ProductAttribute[]
  thumbImageId      Int?
  thumbImage        Media? @relation("thumb", fields: [thumbImageId], references: [id])
  images            Media[]

  @@map("products")
}

model ProductAttribute {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value     String

  productId Int
  detailId  Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  detail    Attribute @relation(fields: [detailId], references: [id])

  @@map("product_attriutes")
}

model CategoryAttribute {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value     String

  categoryId Int
  attributeId  Int

  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attribute    Attribute @relation(fields: [attributeId], references: [id])

  @@map("category_attriutes")
}

model Attribute {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  type      AttributeType @default(STRING)
  options   String? 

  productAttribute ProductAttribute[]
  categoryAttribute CategoryAttribute[]

  @@map("attributes")
}

enum AttributeType {
  STRING
  NUMBER
  BOOLEAN
}

model ProductContent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title              String?
  description        String?
  slug               String?
  instructions       String?
  storage_conditions String?
  ingredients        String?

  productId Int
  langId    String

  product Product @relation(fields: [productId], references: [id])
  lang    Lang    @relation(fields: [langId], references: [langId])

  @@unique([langId, productId])
  @@map("product_content")
}

model Media {
  id        Int      @id @default(autoincrement())
  productId Int?     
  fileName  String
  mediaType String
  url       String
  caption   String
  product   Product?  @relation(fields: [productId], references: [id])

  products Product[] @relation("thumb")
}

// model CategoryProduct {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   categoryId Int
//   productId  Int

//   category Category @relation(fields: [categoryId], references: [id])
//   product  Product  @relation(fields: [productId], references: [id])

//   @@map("category_product")
// }


